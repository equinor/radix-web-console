import { Accordion, Typography } from '@equinor/eds-core-react';

import { useGetComponentVulnerabilities } from './use-get-component-vulnerability';

import { SimpleAsyncResource } from '../async-resource/simple-async-resource';
import { VulnerabilityDetails } from '../vulnerability-details';
import { RequestState } from '../../state/state-utils/request-states';
import { relativeTimeToNow } from '../../utils/datetime';
import { isNullOrUndefined } from '../../utils/object';

export interface ComponentVulnerabilityDetailsProps {
  appName: string;
  envName: string;
  componentName: string;
}

function getScanStatus(x?: boolean): string {
  return isNullOrUndefined(x) ? 'not performed' : ['failed', 'succeeded'][+!!x];
}

export const ComponentVulnerabilityDetails = ({
  appName,
  envName,
  componentName,
}: ComponentVulnerabilityDetailsProps): JSX.Element => {
  const [state] = useGetComponentVulnerabilities(
    appName,
    envName,
    componentName
  );
  const vulnerabilityCount = state.data?.vulnerabilities?.length || 0;

  return (
    <Accordion className="accordion elevated" chevronPosition="right">
      <Accordion.Item
        isExpanded={
          state.status === RequestState.IN_PROGRESS || vulnerabilityCount > 0
        }
      >
        <Accordion.Header>
          <Typography variant="h4">
            Vulnerabilities (
            {state.status === RequestState.IN_PROGRESS
              ? '...'
              : vulnerabilityCount}
            )
          </Typography>
        </Accordion.Header>
        <Accordion.Panel>
          <SimpleAsyncResource asyncState={state}>
            {state.data && (
              <div className="grid grid--gap-large">
                <div className="grid grid--gap-medium">
                  <Typography>
                    Base Image <strong>{state.data.baseImage}</strong>
                  </Typography>
                  <Typography>
                    Scan {getScanStatus(state.data.scanSuccess)}{' '}
                    {!isNullOrUndefined(state.data.scanSuccess) && (
                      <strong>
                        {relativeTimeToNow(state.data.scanTime || 0)}
                      </strong>
                    )}
                  </Typography>
                </div>
                <div className="grid grid--gap-medium">
                  <VulnerabilityDetails
                    vulnerabilities={state.data.vulnerabilities}
                  />
                </div>
              </div>
            )}
          </SimpleAsyncResource>
        </Accordion.Panel>
      </Accordion.Item>
    </Accordion>
  );
};
