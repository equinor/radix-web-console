import { Accordion, Typography } from '@equinor/eds-core-react';

import { useGetComponentVulnerabilities } from './use-get-component-vulnerability';

import { SimpleAsyncResource } from '../async-resource/simple-async-resource';
import { VulnerabilityDetails } from '../vulnerability-details';
import { RequestState } from '../../state/state-utils/request-states';
import { formatDateTime } from '../../utils/datetime';

export interface ComponentVulnerabilityDetailsProps {
  appName: string;
  envName: string;
  componentName: string;
}

export const ComponentVulnerabilityDetails = ({
  appName,
  envName,
  componentName,
}: ComponentVulnerabilityDetailsProps): JSX.Element => {
  const [state] = useGetComponentVulnerabilities(
    appName,
    envName,
    componentName
  );
  const vulnerabilityCount = state.data?.vulnerabilities?.length || 0;

  return (
    <Accordion className="accordion elevated" chevronPosition="right">
      <Accordion.Item
        isExpanded={
          state.status === RequestState.IN_PROGRESS || vulnerabilityCount > 0
        }
      >
        <Accordion.Header>
          <Typography variant="h4">
            Vulnerabilities (
            {state.status === RequestState.IN_PROGRESS
              ? '...'
              : vulnerabilityCount}
            )
          </Typography>
        </Accordion.Header>
        <Accordion.Panel>
          <div>
            <SimpleAsyncResource asyncState={state}>
              <div className="grid grid--gap-large">
                {state.data && (
                  <>
                    <div className="grid grid--gap-medium">
                      <Typography>
                        Base Image <strong>{state.data.baseImage}</strong>
                      </Typography>
                      <Typography>
                        Scanned{' '}
                        <strong>
                          {formatDateTime(state.data.scanTime || 0)}
                        </strong>
                      </Typography>
                    </div>
                    <div className="grid grid--gap-medium">
                      <VulnerabilityDetails
                        vulnerabilities={state.data.vulnerabilities}
                      />
                    </div>
                  </>
                )}
              </div>
            </SimpleAsyncResource>
          </div>
        </Accordion.Panel>
      </Accordion.Item>
    </Accordion>
  );
};
