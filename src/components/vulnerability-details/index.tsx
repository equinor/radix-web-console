import { Accordion } from '@equinor/eds-core-react';
import { upperFirst } from 'lodash';
import * as PropTypes from 'prop-types';
import { useEffect, useState } from 'react';

import { Alert } from '../alert';
import { VulnerabilityList } from '../vulnerability-list';
import {
  VulnerabilityModel,
  VulnerabilityModelValidationMap,
} from '../../models/vulnerability';
import { sortCompareNumber } from '../../utils/sort-utils';

export interface VulnerabilityDetailsProps {
  vulnerabilities?: Array<VulnerabilityModel>;
}

const severitySortOrder: { [key: string]: number } = {
  critical: 1,
  high: 2,
  medium: 3,
  low: 4,
};

function useGroupVulnerabilities(vulnerabilities: Array<VulnerabilityModel>): {
  [key: string]: Array<VulnerabilityModel>;
} {
  const [groupedList, setGroupedList] = useState<{
    [key: string]: Array<VulnerabilityModel>;
  }>({});

  useEffect(() => {
    const list = vulnerabilities
      ?.sort((a, b) =>
        sortCompareNumber(a.cvss, b.cvss, 'descending', function () {
          return a.severity === b.severity;
        })
      )
      .reduce<{ [key: string]: Array<VulnerabilityModel> }>((obj, x) => {
        const slot = obj[x.severity] ?? [];
        slot.push(x);
        obj[x.severity] = slot;
        return obj;
      }, {});
    setGroupedList(list);
  }, [vulnerabilities]);

  return groupedList;
}

export const VulnerabilityDetails = ({
  vulnerabilities,
}: VulnerabilityDetailsProps): JSX.Element => {
  const groupedList = useGroupVulnerabilities(vulnerabilities);

  return vulnerabilities?.length > 0 ? (
    <>
      {Object.keys(groupedList).map((severity) => (
        <Accordion key={severity} className="accordion" chevronPosition="right">
          <Accordion.Item>
            <Accordion.Header>
              <Accordion.HeaderTitle>
                {upperFirst(severity)} ({groupedList[severity].length})
              </Accordion.HeaderTitle>
            </Accordion.Header>
            <Accordion.Panel>
              <VulnerabilityList vulnerabilityList={groupedList[severity]} />
            </Accordion.Panel>
          </Accordion.Item>
        </Accordion>
      ))}
    </>
  ) : (
    <Alert type="info">No vulnerabilities found</Alert>
  );
};

VulnerabilityDetails.propTypes = {
  vulnerabilities: PropTypes.arrayOf(
    PropTypes.shape(VulnerabilityModelValidationMap)
  ),
} as PropTypes.ValidationMap<VulnerabilityDetailsProps>;
