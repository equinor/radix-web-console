import { Accordion } from '@equinor/eds-core-react';
import * as PropTypes from 'prop-types';
import { useEffect, useState } from 'react';

import { Alert } from '../alert';
import { VulnerabilityList } from '../vulnerability-list';
import {
  VulnerabilityModel,
  VulnerabilityModelValidationMap,
} from '../../models/vulnerability';
import { sortCompareNumber, sortDirection } from '../../utils/sort-utils';

export interface VulnerabilityDetailsProps {
  vulnerabilities?: Array<VulnerabilityModel>;
  direction?: sortDirection;
}

const severityOrder: { [key: string]: number } = {
  critical: 1,
  high: 2,
  medium: 3,
  low: 4,
};

function useGroupVulnerabilities(vulnerabilities: Array<VulnerabilityModel>): {
  [key: string]: Array<VulnerabilityModel>;
} {
  const [groupedList, setGroupedList] = useState<{
    [key: string]: Array<VulnerabilityModel>;
  }>({});

  useEffect(() => {
    const list = vulnerabilities
      ?.sort((a, b) => sortCompareNumber(a.cvss, b.cvss, 'descending'))
      .reduce<{ [key: string]: Array<VulnerabilityModel> }>((obj, x) => {
        const key = x.severity.toLowerCase();
        (obj[key] = obj[key] || []).push(x);
        return obj;
      }, {});

    setGroupedList(list);
  }, [vulnerabilities]);

  return groupedList;
}

export const VulnerabilityDetails = ({
  vulnerabilities,
  direction = 'ascending',
}: VulnerabilityDetailsProps): JSX.Element => {
  const groupedList = useGroupVulnerabilities(vulnerabilities);
  const keys = Object.keys(groupedList);

  return keys.length > 0 ? (
    <>
      {keys
        .sort((a, b) =>
          sortCompareNumber(
            severityOrder[a.toLowerCase()],
            severityOrder[b.toLowerCase()],
            direction
          )
        )
        .map((key) => (
          <Accordion key={key} className="accordion" chevronPosition="right">
            <Accordion.Item>
              <Accordion.Header>
                <Accordion.HeaderTitle>
                  {key.toUpperCase()} ({groupedList[key].length})
                </Accordion.HeaderTitle>
              </Accordion.Header>
              <Accordion.Panel>
                <VulnerabilityList vulnerabilityList={groupedList[key]} />
              </Accordion.Panel>
            </Accordion.Item>
          </Accordion>
        ))}
    </>
  ) : (
    <Alert type="info">No vulnerabilities found</Alert>
  );
};

VulnerabilityDetails.propTypes = {
  vulnerabilities: PropTypes.arrayOf(
    PropTypes.shape(VulnerabilityModelValidationMap)
  ),
  direction: PropTypes.oneOf<sortDirection>(['ascending', 'descending']),
} as PropTypes.ValidationMap<VulnerabilityDetailsProps>;
