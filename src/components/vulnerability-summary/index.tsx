import { List, Tooltip, Typography } from '@equinor/eds-core-react';
import * as PropTypes from 'prop-types';

import { ScanModel, ScanModelValidationMap } from '../../models/scan';
import { ScanStatus } from '../../models/scan-status';
import {
  VulnerabilitySummaryModel,
  VulnerabilitySummaryModelValidationMap,
} from '../../models/vulnerability-summary';

import './style.css';

export interface VulnerabilitySummaryProps {
  vulnerabilitySummary: VulnerabilitySummaryModel;
}

export interface VulnerabilitySummaryTotalProps {
  scans: Array<ScanModel>;
}

const VulnerabilityItem = ({
  severity,
  count,
}: {
  severity: keyof typeof VulnerabilitySummaryModelValidationMap;
  count: number;
}): JSX.Element => (
  <List.Item
    className={`severity-summary__item severity-summary__item--${
      (count && severity) || 'none'
    }`}
  >
    <div className="severity-summary__count">
      <span className="severity-summary__label">{count || 0}</span>
    </div>
    <Tooltip placement="top" title={`${severity} issues`}>
      <div className="severity-summary__text">
        <span className="severity-summary__label">
          {severity[0].toUpperCase()}
        </span>
      </div>
    </Tooltip>
  </List.Item>
);

export const VulnerabilitySummary = ({
  vulnerabilitySummary,
}: VulnerabilitySummaryProps): JSX.Element => {
  const keys = Object.keys(VulnerabilitySummaryModelValidationMap) as Array<
    keyof typeof VulnerabilitySummaryModelValidationMap
  >;

  return (
    <List className="severity-summary">
      {keys
        .filter((key) => !(key === 'unknown' && !vulnerabilitySummary[key]))
        .sort((x, y) => keys.indexOf(x) - keys.indexOf(y))
        .map((key) => (
          <VulnerabilityItem
            key={key}
            severity={key}
            count={vulnerabilitySummary[key]}
          />
        ))}
    </List>
  );
};

export const VulnerabilitySummaryTotal = ({
  scans,
}: VulnerabilitySummaryTotalProps): JSX.Element => {
  const summary = scans.reduce<{
    errors: number;
    vulnerabilities: VulnerabilitySummaryModel;
  }>(
    (result, scan) => {
      result.errors += +(scan.status !== ScanStatus.Success);

      Object.keys(scan.vulnerabilities).forEach((key) => {
        if (scan.vulnerabilities[key]) {
          result.vulnerabilities[key] =
            (result.vulnerabilities[key] || 0) + scan.vulnerabilities[key];
        }
      });
      return result;
    },
    { errors: 0, vulnerabilities: {} }
  );

  return (
    <>
      <VulnerabilitySummary vulnerabilitySummary={summary.vulnerabilities} />
      {summary.errors > 0 && (
        <Typography color="warning">
          {summary.errors} of {scans.length} vulnerability scans has an error
        </Typography>
      )}
    </>
  );
};

VulnerabilitySummary.propTypes = {
  vulnerabilitySummary: PropTypes.shape(VulnerabilitySummaryModelValidationMap)
    .isRequired,
} as PropTypes.ValidationMap<VulnerabilitySummaryProps>;

VulnerabilitySummaryTotal.propTypes = {
  scans: PropTypes.arrayOf(PropTypes.shape(ScanModelValidationMap)).isRequired,
} as PropTypes.ValidationMap<VulnerabilitySummaryTotalProps>;
