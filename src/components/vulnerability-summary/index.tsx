import { List, Tooltip } from '@equinor/eds-core-react';
import * as PropTypes from 'prop-types';

import {
  VulnerabilitySummaryModel,
  VulnerabilitySummaryModelValidationMap,
} from '../../models/vulnerability-summary';

import './style.css';

interface VulnerabilityItemProps {
  severity: keyof typeof VulnerabilitySummaryModelValidationMap;
  count: number;
}

export interface VulnerabilitySummaryProps {
  vulnerabilitySummary: VulnerabilitySummaryModel;
}

const VulnerabilityItem = (props: VulnerabilityItemProps): JSX.Element => (
  <List.Item
    key={props.severity}
    className={`severity-summary__item severity-summary__item--${
      (props.count && props.severity) || 'none'
    }`}
  >
    <div className="severity-summary__count">
      <span className="severity-summary__label">{props.count || 0}</span>
    </div>
    <Tooltip placement="top" title={`${props.severity} issues`}>
      <div className="severity-summary__text">
        <span className="severity-summary__label">
          {props.severity[0].toUpperCase()}
        </span>
      </div>
    </Tooltip>
  </List.Item>
);

export const VulnerabilitySummary = (
  props: VulnerabilitySummaryProps
): JSX.Element => {
  const keys = Object.keys(VulnerabilitySummaryModelValidationMap) as Array<
    keyof typeof VulnerabilitySummaryModelValidationMap
  >;

  return (
    <List className="severity-summary">
      {keys
        .filter((key) => key !== 'unknown')
        .sort((x, y) => keys.indexOf(x) - keys.indexOf(y))
        .map((key) => (
          <VulnerabilityItem
            key={key}
            severity={
              key as keyof typeof VulnerabilitySummaryModelValidationMap
            }
            count={props.vulnerabilitySummary[key]}
          />
        ))}
      {props.vulnerabilitySummary.unknown && (
        <VulnerabilityItem
          severity={'unknown'}
          count={props.vulnerabilitySummary.unknown}
        />
      )}
    </List>
  );
};

VulnerabilitySummary.propTypes = {
  vulnerabilitySummary: PropTypes.shape(VulnerabilitySummaryModelValidationMap)
    .isRequired,
};
