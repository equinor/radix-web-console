import { List, Tooltip, Typography } from '@equinor/eds-core-react';
import { clsx } from 'clsx';
import * as PropTypes from 'prop-types';
import { FunctionComponent } from 'react';

import {
  VulnerabilitySummaryModel,
  VulnerabilitySummaryModelValidationMap,
} from '../../models/scan-api/models/vulnerability-summary';

import './style.css';

export interface VulnerabilitySummaryProps {
  summary?: VulnerabilitySummaryModel;
  visibleKeys?: Array<keyof VulnerabilitySummaryModel>;
}

const VulnerabilitySummaryKeys = Object.freeze(
  Object.keys(VulnerabilitySummaryModelValidationMap) as Readonly<
    Array<keyof typeof VulnerabilitySummaryModelValidationMap>
  >
);

const VulnerabilityBadge: FunctionComponent<{
  severity: keyof VulnerabilitySummaryModel;
  count: number;
}> = ({ severity, count }) => (
  <div
    className={clsx('severity-summary-badge', {
      [`severity-summary-badge__${severity}`]: !!(count && severity),
    })}
  >
    <Typography className="severity-summary-badge__count">
      {count ?? 0}
    </Typography>
    <Tooltip placement="top" title={`${severity} issues`}>
      <Typography className="severity-summary-badge__text">
        {severity[0].toUpperCase()}
      </Typography>
    </Tooltip>
  </div>
);

export const VulnerabilitySummary: FunctionComponent<
  VulnerabilitySummaryProps
> = ({ summary, visibleKeys }) => {
  const keys = [
    ...(visibleKeys?.length > 0 ? visibleKeys : VulnerabilitySummaryKeys),
  ];

  return (
    <List className="grid grid--gap-small grid--auto-columns">
      {keys
        .filter((key) => !(key === 'unknown' && !summary?.[key]))
        .sort((x, y) => keys.indexOf(x) - keys.indexOf(y))
        .map((key) => (
          <List.Item key={key}>
            <VulnerabilityBadge severity={key} count={summary?.[key] ?? 0} />
          </List.Item>
        ))}
    </List>
  );
};

VulnerabilitySummary.propTypes = {
  summary: PropTypes.shape(VulnerabilitySummaryModelValidationMap),
  visibleKeys: PropTypes.arrayOf(PropTypes.oneOf(VulnerabilitySummaryKeys)),
};
