import { List, Tooltip, Typography } from '@equinor/eds-core-react'
import { clsx } from 'clsx'
import type { FunctionComponent } from 'react'
import type { ImageScan, Vulnerability } from '../../store/scan-api'
import './style.css'

const VulnerabilitySummaryKeys = ['critical', 'high', 'medium', 'low', 'unknown'] as const

type VulnerabilityBadgeProps = {
  severity: (typeof VulnerabilitySummaryKeys)[number]
  count: number
}
const VulnerabilityBadge: FunctionComponent<VulnerabilityBadgeProps> = ({ severity, count }) => (
  <div
    className={clsx('severity-summary-badge', {
      [`severity-summary-badge__${severity}`]: !!(count && severity),
    })}
  >
    <Typography className="severity-summary-badge__count">{count ?? 0}</Typography>
    <Tooltip placement="top" title={`${severity} issues`}>
      <Typography className="severity-summary-badge__text">{severity[0].toUpperCase()}</Typography>
    </Tooltip>
  </div>
)

export interface VulnerabilitySummaryProps {
  summary?: ImageScan['vulnerabilitySummary']
  visibleKeys?: Array<Lowercase<Vulnerability['severity']>>
}
export const VulnerabilitySummary = ({ summary, visibleKeys }: VulnerabilitySummaryProps) => {
  const keys = visibleKeys ?? VulnerabilitySummaryKeys

  return (
    <List className="grid grid--gap-small grid--auto-columns">
      {keys
        .filter((key) => !(key === 'unknown' && !summary?.[key]))
        .sort((x, y) => keys.indexOf(x) - keys.indexOf(y))
        .map((key) => (
          <List.Item key={key}>
            <VulnerabilityBadge severity={key} count={summary?.[key] ?? 0} />
          </List.Item>
        ))}
    </List>
  )
}
