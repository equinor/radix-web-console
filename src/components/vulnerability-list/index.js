import { Card, Divider, List, Typography } from '@equinor/eds-core-react';
import PropTypes from 'prop-types';
import React from 'react';

import externalUrls from '../../externalUrls';
import VulnerabilityModel from '../../models/vulnerability';
import { formatDateTimeYear } from '../../utils/datetime';

import './style.css';

const SeverityIcon = ({ severity }) => (
  <span
    title={severity}
    className={`severity-icon severity-icon--${severity.toLowerCase()}`}
  >
    <Typography variant="h3" token={{ color: 'inherit' }}>
      {severity.substring(0, 1)}
    </Typography>
  </span>
);

const VulnerabilityMetadata = ({ vulnerability }) => (
  <List className="severity-metadata">
    <List.Item className="severity-metadata__item">
      <Typography variant="overline">Version</Typography>
      <Typography>{vulnerability.version}</Typography>
    </List.Item>
    {vulnerability.cwe && vulnerability.cwe.length > 0 && (
      <List.Item className="severity-metadata__item">
        <Typography variant="overline">CWE</Typography>
        <Typography
          link
          rel="noopener noreferrer"
          target="_blank"
          href={externalUrls.cweVulnerabilityInformation(vulnerability.cwe[0])}
        >
          {vulnerability.cwe[0]}
        </Typography>
      </List.Item>
    )}
    {vulnerability.cve && vulnerability.cve.length > 0 && (
      <List.Item className="severity-metadata__item">
        <Typography variant="overline">CVE</Typography>
        <Typography
          link
          rel="noopener noreferrer"
          target="_blank"
          href={externalUrls.cveVulnerabilityInformation(vulnerability.cve[0])}
        >
          {vulnerability.cve[0]}
        </Typography>
      </List.Item>
    )}
    {vulnerability.cvss && (
      <List.Item className="severity-metadata__item">
        <Typography variant="overline">CVSS</Typography>
        <Typography> {vulnerability.cvss}</Typography>
      </List.Item>
    )}
    {vulnerability.publishedDate && (
      <List.Item className="severity-metadata__item">
        <Typography variant="overline">Published Date</Typography>
        <Typography>
          {formatDateTimeYear(vulnerability.publishedDate)}
        </Typography>
      </List.Item>
    )}
  </List>
);

const VulnerabilityReferences = ({ references }) => (
  <div>
    <Typography variant="overline">References</Typography>
    <List>
      {references.map((r, i) => (
        <List.Item key={i}>
          <Typography link href={r} rel="noopener noreferrer" target="_blank">
            {r}
          </Typography>
        </List.Item>
      ))}
    </List>
  </div>
);

const VulnerabilityItem = ({ vulnerability }) => (
  <Card>
    <Card.Header>
      <Card.HeaderTitle>
        <Typography variant="h4" as="span" className="severity-header">
          <SeverityIcon severity={vulnerability.severity} />
          {vulnerability.packageName}
        </Typography>
      </Card.HeaderTitle>
    </Card.Header>
    {vulnerability.title && (
      <Typography variant="ingress">{vulnerability.title}</Typography>
    )}
    <VulnerabilityMetadata vulnerability={vulnerability} />
    {!!vulnerability.description && (
      <div>
        <Typography variant="overline">Description</Typography>
        <Typography>{vulnerability.description}</Typography>
      </div>
    )}
    {vulnerability.references && vulnerability.references.length > 0 && (
      <VulnerabilityReferences references={vulnerability.references} />
    )}
  </Card>
);

const VulnerabilityList = ({ vulnerabilityList }) => (
  <List>
    {vulnerabilityList.map((v, i) => (
      <React.Fragment key={i}>
        <List.Item>
          <VulnerabilityItem vulnerability={v} />
        </List.Item>
        {vulnerabilityList.length - 1 > i && <Divider />}
      </React.Fragment>
    ))}
  </List>
);

VulnerabilityList.propTypes = {
  vulnerabilityList: PropTypes.arrayOf(PropTypes.exact(VulnerabilityModel))
    .isRequired,
};

export default VulnerabilityList;
