import PropTypes from 'prop-types';
import React from 'react';
import classnames from 'classnames';

import { Card, Typography } from '@equinor/eds-core-react';
import VulnerabilityModel from '../../models/vulnerability';
import './style.css';
import { formatDateTimeYear } from '../../utils/datetime';
import externalUrls from '../../externalUrls';

const SeverityIcon = ({ severity }) => {
  return (
    <span
      title={severity}
      className={classnames(
        'severity-icon',
        'severity-icon--' + severity.toLowerCase()
      )}
    >
      <span>{severity.substring(0, 1)}</span>
    </span>
  );
};

const VulnerabilityMetadata = ({ vulnerability }) => {
  return (
    <ul className="severity-metadata">
      <li className="severity-metadata__item">
        <Typography variant="overline">Version</Typography>
        <Typography group="table" variant="cell_text">
          {vulnerability.version}
        </Typography>
      </li>
      {vulnerability.cwe && vulnerability.cwe.length > 0 && (
        <li className="severity-metadata__item">
          <Typography variant="overline">CWE</Typography>
          <Typography
            group="table"
            variant="cell_text"
            link
            rel="noopener noreferrer"
            target="_blank"
            href={externalUrls.cweVulnerabilityInformation(
              vulnerability.cwe[0]
            )}
          >
            {vulnerability.cwe[0]}
          </Typography>
        </li>
      )}
      {vulnerability.cve && vulnerability.cve.length > 0 && (
        <li className="severity-metadata__item">
          <Typography variant="overline">CVE</Typography>
          <Typography
            group="table"
            variant="cell_text"
            link
            rel="noopener noreferrer"
            target="_blank"
            href={externalUrls.cveVulnerabilityInformation(
              vulnerability.cve[0]
            )}
          >
            {vulnerability.cve[0]}
          </Typography>
        </li>
      )}
      {!!vulnerability.cvss && (
        <li className="severity-metadata__item">
          <Typography variant="overline">CVSS</Typography>
          <Typography group="table" variant="cell_text">
            {vulnerability.cvss}
          </Typography>
        </li>
      )}
      {!!vulnerability.publishedDate && (
        <li className="severity-metadata__item">
          <Typography variant="overline">Published Date</Typography>
          <Typography group="table" variant="cell_text">
            {formatDateTimeYear(vulnerability.publishedDate)}
          </Typography>
        </li>
      )}
    </ul>
  );
};

const VulnerabilityReferences = ({ references }) => {
  return (
    <div>
      <Typography variant="overline">References</Typography>
      <ul>
        {references.map((r, i) => (
          <li key={i}>
            <Typography link href={r} rel="noopener noreferrer" target="_blank">
              {r}
            </Typography>
          </li>
        ))}
      </ul>
    </div>
  );
};

const VulnerabilityItem = ({ vulnerability }) => {
  return (
    <li className="severity-list__item">
      <Card>
        <Card.Header>
          <Card.HeaderTitle>
            <Typography variant="h3" className="severity-header">
              <SeverityIcon severity={vulnerability.severity} />
              <Typography variant="h4" as="span">
                {vulnerability.packageName}
              </Typography>
            </Typography>
          </Card.HeaderTitle>
        </Card.Header>
        {vulnerability.title && (
          <Typography variant="ingress">{vulnerability.title}</Typography>
        )}
        <VulnerabilityMetadata
          vulnerability={vulnerability}
        ></VulnerabilityMetadata>
        {!!vulnerability.description && (
          <div>
            <Typography variant="overline">Description</Typography>
            <Typography variant="body_short">
              {vulnerability.description}
            </Typography>
          </div>
        )}
        {vulnerability.references && vulnerability.references.length > 0 && (
          <VulnerabilityReferences
            references={vulnerability.references}
          ></VulnerabilityReferences>
        )}
      </Card>
    </li>
  );
};

const VulnerabilityList = ({ vulnerabilityList }) => {
  return (
    <ul className="severity-list">
      {vulnerabilityList.map((v, i) => (
        <VulnerabilityItem key={i} vulnerability={v}></VulnerabilityItem>
      ))}
    </ul>
  );
};

VulnerabilityList.propTypes = {
  vulnerabilityList: PropTypes.arrayOf(PropTypes.exact(VulnerabilityModel))
    .isRequired,
};

export default VulnerabilityList;
