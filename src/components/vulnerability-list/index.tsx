import { Divider, List, Typography } from '@equinor/eds-core-react';
import * as PropTypes from 'prop-types';
import ReactMarkdown from 'react-markdown';
import { FunctionComponent } from 'react';

import { externalUrls } from '../../externalUrls';
import {
  VulnerabilityModel,
  VulnerabilityModelValidationMap,
} from '../../models/scan-api/models/vulnerability';
import { formatDateTimeYear } from '../../utils/datetime';

import './style.css';

export interface VulnerabilityListProps {
  vulnerabilityList: Array<VulnerabilityModel>;
}

const SeverityIcon: FunctionComponent<{ severity: string }> = ({
  severity,
}) => (
  <span className={`severity-icon severity-icon--${severity.toLowerCase()}`}>
    <Typography variant="h3" color="white">
      {severity.substring(0, 1).toUpperCase()}
    </Typography>
  </span>
);

const VulnerabilityMetadata: FunctionComponent<{
  vulnerability: VulnerabilityModel;
}> = ({ vulnerability }) => (
  <List className="severity-metadata">
    <List.Item>
      <Typography variant="overline">Version</Typography>
      {vulnerability.version}
    </List.Item>
    {vulnerability.cwe?.length > 0 && (
      <List.Item>
        <Typography variant="overline">CWE</Typography>
        <Typography
          link
          rel="noopener noreferrer"
          target="_blank"
          href={externalUrls.cweVulnerabilityInformation(vulnerability.cwe[0])}
        >
          {vulnerability.cwe[0]}
        </Typography>
      </List.Item>
    )}
    {vulnerability.cve?.length > 0 && (
      <List.Item>
        <Typography variant="overline">CVE</Typography>
        <Typography
          link
          rel="noopener noreferrer"
          target="_blank"
          href={externalUrls.cveVulnerabilityInformation(vulnerability.cve[0])}
        >
          {vulnerability.cve[0]}
        </Typography>
      </List.Item>
    )}
    {vulnerability.cvss && (
      <List.Item>
        <Typography variant="overline">CVSS</Typography>
        {vulnerability.cvss}
      </List.Item>
    )}
    {vulnerability.publishedDate && (
      <List.Item>
        <Typography variant="overline">Published Date</Typography>
        {formatDateTimeYear(vulnerability.publishedDate)}
      </List.Item>
    )}
  </List>
);

const VulnerabilityItem: FunctionComponent<{
  vulnerability: VulnerabilityModel;
}> = ({ vulnerability }) => (
  <div className="grid grid--gap-medium">
    <div className="grid grid--gap-medium grid--auto-columns">
      <SeverityIcon severity={vulnerability.severity} />
      <Typography variant="h4">{vulnerability.packageName}</Typography>
    </div>
    <div className="grid grid--gap-medium">
      {vulnerability.title && (
        <Typography variant="ingress">{vulnerability.title}</Typography>
      )}
      <VulnerabilityMetadata vulnerability={vulnerability} />
      {vulnerability.description && (
        <div>
          <Typography variant="overline">Description</Typography>
          <ReactMarkdown
            className="severity-list__item-description--markdown"
            linkTarget="_blank"
          >
            {vulnerability.description}
          </ReactMarkdown>
        </div>
      )}
      {vulnerability.references?.length > 0 && (
        <div>
          <Typography variant="overline">References</Typography>
          <List className="severity-list__item-links">
            {vulnerability.references.map((href, i) => (
              <List.Item key={i}>
                <Typography
                  link
                  href={href}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {href}
                </Typography>
              </List.Item>
            ))}
          </List>
        </div>
      )}
    </div>
  </div>
);

export const VulnerabilityList: FunctionComponent<VulnerabilityListProps> = ({
  vulnerabilityList,
}) => (
  <List className="grid grid--gap-medium">
    {vulnerabilityList.map((x, i) => (
      <List.Item key={i}>
        <div className="severity-list__item">
          <VulnerabilityItem vulnerability={x} />
          {vulnerabilityList.length - 1 > i && <Divider />}
        </div>
      </List.Item>
    ))}
  </List>
);

VulnerabilityList.propTypes = {
  vulnerabilityList: PropTypes.arrayOf(
    PropTypes.shape(
      VulnerabilityModelValidationMap
    ) as PropTypes.Validator<VulnerabilityModel>
  ).isRequired,
};
