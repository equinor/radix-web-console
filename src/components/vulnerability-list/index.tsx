import { Divider, List, Typography } from '@equinor/eds-core-react'
import type { FunctionComponent, HTMLAttributes } from 'react'
import ReactMarkdown, { type Components } from 'react-markdown'
import { externalUrls } from '../../externalUrls'
import type { Vulnerability } from '../../store/scan-api'
import { formatDateTimeYear } from '../../utils/datetime'
import './style.css'
import { ExternalLink } from '../link/external-link'

export interface VulnerabilityListProps {
  vulnerabilityList: Array<Vulnerability>
}

function formatLinkTitle(link: string): string {
  return link.replace(
    /(https?:\/\/)?(git\.)?(www\.)?(lists\.fedoraproject\.org\/archives\/list\/package-announce(%40|@))?/,
    ''
  )
}

// override components for ReactMarkdown
const MdComponents: Readonly<Components> = {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  a: ({ node: __omitNode, ...props }) => (
    <Typography
      as="a"
      link
      target="_blank"
      rel="noopener noreferrer"
      style={{ wordBreak: 'break-word' }}
      {...(props as HTMLAttributes<HTMLAnchorElement>)}
    />
  ),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  code: ({ node: __omitNode, ...p }) => (
    <Typography as="code" variant="caption" {...(p as HTMLAttributes<HTMLElement>)} />
  ),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  p: ({ node: __omitNode, ...p }) => (
    <Typography
      as="p"
      variant="body_short"
      style={{ marginBlock: '1em', marginInline: '0' }}
      {...(p as HTMLAttributes<HTMLParagraphElement>)}
    />
  ),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  ul: ({ node: __omitNode, ...p }) => <List {...(p as HTMLAttributes<HTMLUListElement>)} />,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  li: ({ node: __omitNode, ...p }) => <List.Item {...(p as HTMLAttributes<HTMLLIElement>)} />,
}

const SeverityIcon: FunctionComponent<{ severity: string }> = ({ severity }) => (
  <span className={`severity-icon severity-icon--${severity.toLowerCase()}`}>
    <Typography variant="h3" color="white">
      {severity.substring(0, 1).toUpperCase()}
    </Typography>
  </span>
)

const VulnerabilityMetadata: FunctionComponent<{
  vulnerability: Vulnerability
}> = ({ vulnerability }) => (
  <List className="severity-metadata">
    <List.Item>
      <Typography variant="overline">Version</Typography>
      {vulnerability.version}
    </List.Item>
    {vulnerability.cwe && vulnerability.cwe.length > 0 && (
      <List.Item>
        <Typography variant="overline">CWE</Typography>
        <ExternalLink href={externalUrls.cweVulnerabilityInformation(vulnerability.cwe[0])}>
          {vulnerability.cwe[0]}
        </ExternalLink>
      </List.Item>
    )}
    {vulnerability.cve && vulnerability.cve.length > 0 && (
      <List.Item>
        <Typography variant="overline">CVE</Typography>
        <ExternalLink href={externalUrls.cveVulnerabilityInformation(vulnerability.cve[0])}>
          {vulnerability.cve[0]}
        </ExternalLink>
      </List.Item>
    )}
    {vulnerability.cvss && (
      <List.Item>
        <Typography variant="overline">CVSS</Typography>
        {vulnerability.cvss}
      </List.Item>
    )}
    {vulnerability.publishedDate && (
      <List.Item>
        <Typography variant="overline">Published Date</Typography>
        {formatDateTimeYear(new Date(vulnerability.publishedDate))}
      </List.Item>
    )}
  </List>
)

const VulnerabilityItem: FunctionComponent<{
  vulnerability: Vulnerability
}> = ({ vulnerability }) => (
  <div className="grid grid--gap-medium">
    <div className="grid grid--gap-medium grid--auto-columns">
      <SeverityIcon severity={vulnerability.severity} />
      <Typography variant="h4">{vulnerability.packageName}</Typography>
    </div>

    {vulnerability.title && <Typography variant="ingress">{vulnerability.title}</Typography>}
    <VulnerabilityMetadata vulnerability={vulnerability} />

    {vulnerability.description && (
      <div>
        <Typography variant="overline">Description</Typography>
        <ReactMarkdown className="severity-list__item-description--markdown" components={MdComponents}>
          {vulnerability.description}
        </ReactMarkdown>
      </div>
    )}

    {vulnerability.references && vulnerability.references.length > 0 && (
      <div>
        <Typography variant="overline">References</Typography>
        <List className="o-indent-list" variant="bullet">
          {vulnerability.references.map((href, i) => (
            <List.Item key={i}>
              <ExternalLink href={href}>{formatLinkTitle(href)}</ExternalLink>
            </List.Item>
          ))}
        </List>
      </div>
    )}
  </div>
)

export const VulnerabilityList: FunctionComponent<VulnerabilityListProps> = ({ vulnerabilityList }) => (
  <List className="grid grid--gap-medium">
    {vulnerabilityList.map((x, i, { length }) => (
      <List.Item key={i}>
        <div className="severity-list__item">
          <VulnerabilityItem vulnerability={x} />
          {length - 1 > i && <Divider />}
        </div>
      </List.Item>
    ))}
  </List>
)
