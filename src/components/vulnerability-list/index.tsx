import { Card, Divider, List, Typography } from '@equinor/eds-core-react';
import * as PropTypes from 'prop-types';
import ReactMarkdown from 'react-markdown';

import { externalUrls } from '../../externalUrls';
import {
  VulnerabilityModel,
  VulnerabilityModelValidationMap,
} from '../../models/vulnerability';
import { formatDateTimeYear } from '../../utils/datetime';

import './style.css';

export interface VulnerabilityListProps {
  vulnerabilityList: Array<VulnerabilityModel>;
}

const SeverityIcon = ({ severity }: { severity: string }): JSX.Element => (
  <span className={`severity-icon severity-icon--${severity.toLowerCase()}`}>
    <Typography variant="h3" color="white">
      {severity.substring(0, 1).toUpperCase()}
    </Typography>
  </span>
);

const VulnerabilityMetadata = ({
  vulnerability,
}: {
  vulnerability: VulnerabilityModel;
}): JSX.Element => (
  <div className="severity-metadata">
    <div>
      <Typography variant="overline">Version</Typography>
      {vulnerability.version}
    </div>
    {vulnerability.cwe?.length > 0 && (
      <div>
        <Typography variant="overline">CWE</Typography>
        <Typography
          link
          rel="noopener noreferrer"
          target="_blank"
          href={externalUrls.cweVulnerabilityInformation(vulnerability.cwe[0])}
        >
          {vulnerability.cwe[0]}
        </Typography>
      </div>
    )}
    {vulnerability.cve?.length > 0 && (
      <div>
        <Typography variant="overline">CVE</Typography>
        <Typography
          link
          rel="noopener noreferrer"
          target="_blank"
          href={externalUrls.cveVulnerabilityInformation(vulnerability.cve[0])}
        >
          {vulnerability.cve[0]}
        </Typography>
      </div>
    )}
    {vulnerability.cvss && (
      <div>
        <Typography variant="overline">CVSS</Typography>
        {vulnerability.cvss}
      </div>
    )}
    {vulnerability.publishedDate && (
      <div>
        <Typography variant="overline">Published Date</Typography>
        {formatDateTimeYear(vulnerability.publishedDate)}
      </div>
    )}
  </div>
);

const VulnerabilityItem = ({
  vulnerability,
}: {
  vulnerability: VulnerabilityModel;
}): JSX.Element => (
  <Card>
    <Card.Header>
      <Card.HeaderTitle>
        <div className="grid grid--gap-medium grid--auto-columns">
          <SeverityIcon severity={vulnerability.severity} />
          <Typography variant="h4">{vulnerability.packageName}</Typography>
        </div>
      </Card.HeaderTitle>
    </Card.Header>
    <Card.Content>
      <div className="grid grid--gap-large">
        {vulnerability.title && (
          <Typography variant="ingress">{vulnerability.title}</Typography>
        )}
        <VulnerabilityMetadata vulnerability={vulnerability} />
        {vulnerability.description && (
          <div>
            <Typography variant="overline">Description</Typography>
            <ReactMarkdown className="severity-list__item-description--markdown">
              {vulnerability.description}
            </ReactMarkdown>
          </div>
        )}
        {vulnerability.references?.length > 0 && (
          <div>
            <Typography variant="overline">References</Typography>
            {vulnerability.references.map((ref, i) => (
              <div key={i} className="severity-list__item-reference">
                <Typography
                  link
                  href={ref}
                  rel="noopener noreferrer"
                  target="_blank"
                >
                  {ref}
                </Typography>
              </div>
            ))}
          </div>
        )}
      </div>
    </Card.Content>
  </Card>
);

export const VulnerabilityList = ({
  vulnerabilityList,
}: VulnerabilityListProps): JSX.Element => (
  <List>
    {vulnerabilityList.map((x, i) => (
      <List.Item key={i}>
        <VulnerabilityItem vulnerability={x} />
        {vulnerabilityList.length - 1 > i && <Divider />}
      </List.Item>
    ))}
  </List>
);

VulnerabilityList.propTypes = {
  vulnerabilityList: PropTypes.arrayOf(
    PropTypes.shape(VulnerabilityModelValidationMap)
  ).isRequired,
} as PropTypes.ValidationMap<VulnerabilityListProps>;

export default VulnerabilityList;
